{"ast":null,"code":"var _jsxFileName = \"/home/zhkim/github/whateverdot/whateverdot/manager/src/components/WorkTable.js\";\nimport React from \"react\";\nimport WorkItem from \"./WorkItem\";\nimport * as R from \"../Resources\";\nimport axios from \"axios\";\nimport PopupWorkDetail from \"./PopupWorkDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass WorkTable extends React.Component {\n  constructor(props) {\n    super(props); // console.log('constructor')\n\n    this.openPopup = item => {\n      // console.log('이건가??')\n      // console.log(e)\n      this.setState({\n        isOpen: !this.state.isOpen,\n        popupItem: item\n      });\n    };\n\n    this.closePopup = () => {\n      window.location.reload(); // window.scrollTo(0, 0);\n\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.getWorGroupList = () => {\n      axios.post('http://localhost:3001/action/get_work_group_list').then(response => {\n        const list = response.data.list;\n        this.setState({\n          list: list\n        });\n        console.log(list);\n      });\n    };\n\n    this.state = {\n      list: [],\n      isOpen: false,\n      date: new Date(),\n      popupItem: {}\n    }; // this.test = this.test.bind(this)\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n    this.updateID = setInterval(() => this.update(), 1000);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n    let list = this.state.list;\n\n    for (let i = 0; i < list.length; i++) {\n      let item = list[i];\n\n      if (item.current_state === R.STATE_PROCESSING) {\n        let v1 = new Date(item.work_started_datetime);\n        let v2 = Date.now();\n        item['view_running_time'] = item.running_time + Math.floor((v2 - v1.getTime()) / 1000);\n        list[i] = item;\n      } else {\n        item['view_running_time'] = item.running_time;\n      }\n    }\n\n    this.setState({\n      list: list\n    });\n  }\n\n  update() {\n    this.getWorGroupList(); // axios.post('http://localhost:3030/get_processing_work_list').then( (response) => {\n    //     let oldList = this.state.list;\n    //     let newList = response.data.list;\n    //     for(let i=0; i<oldList.length; i++) {\n    //         let oldItem = oldList[i];\n    //         for(let k=0; k<newList.length; k++) {\n    //             let newItem = newList[k];\n    //\n    //             // if(oldItem.current_state === R.STATE_PROCESSING) {\n    //             if(oldItem.group_id === newItem.group_id) {\n    //                 oldItem.current_work_count = newItem.current_work_count;\n    //                 oldItem.total_work_count = newItem.total_work_count;\n    //                 oldItem.work_started_datetime = newItem.work_started_datetime;\n    //                 oldItem.running_time = newItem.running_time;\n    //                 oldItem.current_state = newItem.current_state;\n    //                 oldList[i] = oldItem;\n    //                 break;\n    //             }\n    //             // }\n    //         }\n    //     }\n    //     this.setState({list: oldList})\n    // });\n    // this.getWorkList();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n    clearInterval(this.updateID);\n  }\n\n  render() {\n    print(listItems);\n    const listItems = this.state.list.map(item => /*#__PURE__*/_jsxDEV(WorkItem, {\n      value: item,\n      openPopup: this.openPopup.bind(this, item)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 'auto',\n        width: '80%',\n        borderTop: '1px solid black'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          borderBottom: '1px solid black',\n          textAlign: 'left'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\xA0\\xA0\", this.state.date.toLocaleTimeString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), listItems, this.state.isOpen && /*#__PURE__*/_jsxDEV(PopupWorkDetail, {\n        item: this.state.popupItem,\n        content: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n        handleClose: this.closePopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorkTable;","map":{"version":3,"sources":["/home/zhkim/github/whateverdot/whateverdot/manager/src/components/WorkTable.js"],"names":["React","WorkItem","R","axios","PopupWorkDetail","WorkTable","Component","constructor","props","openPopup","item","setState","isOpen","state","popupItem","closePopup","window","location","reload","getWorGroupList","post","then","response","list","data","console","log","date","Date","componentDidMount","timerID","setInterval","tick","updateID","update","i","length","current_state","STATE_PROCESSING","v1","work_started_datetime","v2","now","running_time","Math","floor","getTime","componentWillUnmount","clearInterval","render","print","listItems","map","bind","margin","width","borderTop","borderBottom","textAlign","toLocaleTimeString"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport WorkItem from \"./WorkItem\";\nimport * as R from \"../Resources\";\nimport axios from \"axios\";\nimport PopupWorkDetail from \"./PopupWorkDetail\";\n\nclass WorkTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        // console.log('constructor')\n        this.state = {\n            list: [],\n            isOpen: false,\n            date: new Date(),\n            popupItem: {}\n        };\n\n        // this.test = this.test.bind(this)\n    }\n\n    componentDidMount() {\n\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n\n        this.updateID = setInterval(\n            () => this.update(),\n            1000\n        );\n\n\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n\n        let list = this.state.list;\n        for(let i=0; i<list.length; i++) {\n            let item = list[i];\n            if(item.current_state === R.STATE_PROCESSING) {\n                let v1 = new Date(item.work_started_datetime);\n                let v2 = Date.now();\n                item['view_running_time'] = item.running_time + Math.floor((v2 - v1.getTime()) / 1000);\n                list[i] = item;\n            } else {\n                item['view_running_time'] = item.running_time;\n            }\n         }\n\n        this.setState({list: list})\n    }\n\n    update() {\n        this.getWorGroupList();\n        // axios.post('http://localhost:3030/get_processing_work_list').then( (response) => {\n        //     let oldList = this.state.list;\n        //     let newList = response.data.list;\n        //     for(let i=0; i<oldList.length; i++) {\n        //         let oldItem = oldList[i];\n        //         for(let k=0; k<newList.length; k++) {\n        //             let newItem = newList[k];\n        //\n        //             // if(oldItem.current_state === R.STATE_PROCESSING) {\n        //             if(oldItem.group_id === newItem.group_id) {\n        //                 oldItem.current_work_count = newItem.current_work_count;\n        //                 oldItem.total_work_count = newItem.total_work_count;\n        //                 oldItem.work_started_datetime = newItem.work_started_datetime;\n        //                 oldItem.running_time = newItem.running_time;\n        //                 oldItem.current_state = newItem.current_state;\n        //                 oldList[i] = oldItem;\n        //                 break;\n        //             }\n        //             // }\n        //         }\n        //     }\n        //     this.setState({list: oldList})\n        // });\n        // this.getWorkList();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n        clearInterval(this.updateID);\n    }\n\n    openPopup = (item) => {\n        // console.log('이건가??')\n        // console.log(e)\n        this.setState({isOpen: !this.state.isOpen, popupItem: item})\n    };\n\n    closePopup = () => {\n        window.location.reload();\n        // window.scrollTo(0, 0);\n        this.setState({isOpen: false})\n    };\n\n    getWorGroupList = () => {\n        axios.post('http://localhost:3001/action/get_work_group_list').then( (response) => {\n            const list = response.data.list;\n            this.setState({list: list})\n            console.log(list)\n        });\n    };\n\n    render() {\n\n        print(listItems)\n        const listItems = this.state.list.map((item) =>\n            <WorkItem value={item} openPopup={this.openPopup.bind(this, item)}/>\n        );\n\n        return (\n\n            <div\n                style={{\n                    margin: 'auto',\n                    width: '80%',\n                    borderTop: '1px solid black',\n                }}\n            >\n                <div style={{borderBottom: '1px solid black', textAlign:'left'}}>\n                    <h3>&nbsp;&nbsp;{this.state.date.toLocaleTimeString()}</h3>\n                </div>\n\n                {listItems}\n\n                {this.state.isOpen && <PopupWorkDetail\n                    item={this.state.popupItem}\n                    content={<>\n                    </>}\n                    handleClose={this.closePopup}\n                />}\n            </div>\n        );\n    }\n}\n\nexport default WorkTable;"]},"metadata":{},"sourceType":"module"}